//Nathaniel Smith
//10-20-14
import java.util.*;

public class FixedCapacityStack<Item> implements Iterable<Item> {
    private Item[] a;    // holds the items
    private int N;       // number of items in stack

    // create an empty stack with given capacity
    @SuppressWarnings("unchecked")
	public FixedCapacityStack(int capacity) {
        a = (Item[]) new Object[capacity];   // no generic array creation
    }

    public void push(Item item){ 
    	a[N++] = item;                    
    }
    
    public Item pop(){  
    	return a[--N];                    
    }
    
    public Item peek(){
    	 return a[N];
    }
    
    public int size(){
    	return N = 20;
    }
    
    public Iterator<Item> iterator(){ 
    	return new ReverseArrayIterator(); 
    }

    public void clear(){ 
    	 N = 0; 
    }
    
    public boolean empty(){  
    	return (N == 0);                  
    }
    
    
    public class ReverseArrayIterator implements Iterator<Item>{
        private int i = N-1;

        public boolean hasNext() { 
        	return i >= 0; 
        	}
        public Item next() {
            if (!hasNext()) throw new NoSuchElementException();
            return a[--i];
        }
		@Override
		public void remove() {
			// TODO Auto-generated method stub
			
		}
        
    }
}

    /*public static void main(String[] args) {
        int max = Integer.parseInt(args[0]);
        FixedCapacityStack<String> stack = new FixedCapacityStack<String>(max);
        while (!StdIn.isEmpty()) {
            String item = StdIn.readString();
            if (!item.equals("-")) stack.push(item); 
            else if (stack.isEmpty())  
            	StdOut.println("BAD INPUT"); 
            else                       
            	StdOut.print(stack.pop() + " ");
        }
        StdOut.println();

        // print what's left on the stack
        StdOut.print("Left on stack: ");
        for (String s : stack) {
            StdOut.print(s + " ");
        }
        StdOut.println();
    } 
} */
